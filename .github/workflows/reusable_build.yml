name: Build (Reusable)

on:
    workflow_call:
        inputs:
            os:
                required: true
                type: string
            stage:
                required: true
                type: string
            version:
                required: false
                type: string
            sign:
              required: false
              type: boolean
              default: false
            release:
                required: false
                type: boolean
                default: false
jobs:
    build:
        name: Build - ${{ inputs.os }}
        if: ${{ always() }}
        runs-on: ${{ inputs.os }}
        env:
            VERSION: ${{ inputs.version }}
            STAGE: ${{ inputs.stage }}
        steps:
            - uses: actions/checkout@v2

            - name: Set up Node.js
              uses: actions/setup-node@v1
              with:
                  node-version: 18.15.0

            # Used to read the `binding.gyp` file from `@iota/wallet`
            - name: Set up Python 3.10
              uses: actions/setup-python@v4
              with:
                  python-version: '3.10'

            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  profile: minimal

            - name: Install LLVM and Clang (Windows) # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
              uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
              if: inputs.os == 'windows-2019'
              with:
                  version: '11.0'
                  directory: ${{ runner.temp }}/llvm

            - name: Set LIBCLANG_PATH (Windows)
              run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
              if: inputs.os == 'windows-2019'

            - name: Set deployment target (macOS)
              run: echo "MACOSX_DEPLOYMENT_TARGET=10.14" >> $GITHUB_ENV # TODO: set this to 10.12 once rocksDB issue is fixed
              if: inputs.os == 'macos-11'

            - name: Install required packages (Linux)
              run: |
                  sudo apt update
                  sudo apt install -y gcc-multilib g++-multilib build-essential libssl-dev rpm libsecret-1-dev \
                    software-properties-common apt-transport-https libudev-dev libusb-1.0-0-dev \
                    llvm-dev libclang-dev clang
              if: inputs.os == 'ubuntu-20.04'

            - name: Enable verbose output for electron-builder (macOS/Linux)
              run: echo "DEBUG=electron-builder" >> $GITHUB_ENV
              if: inputs.os != 'windows-2019'

            - name: Enable verbose output for electron-builder (Windows)
              run: echo "DEBUG=electron-builder" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              if: inputs.os == 'windows-2019'

            - name: Set up .npmrc file to use GitHub Packages
              run: |
                  echo "@bloomwalletio:registry=https://npm.pkg.github.com/" >> .npmrc
                  echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGES_PERSONAL_ACCESS_TOKEN }}" >> .npmrc

            - name: Install dependencies
              # Increase network timeout threshold to reduce build failures on Windows
              run: yarn --network-timeout 1000000

            - name: Set productName
              run: node scripts/fix-productName.js
              working-directory: packages/desktop

            - name: Bundle desktop JS
              run: yarn build:${STAGE}
              working-directory: packages/desktop
              shell: bash
              env:
                  HARDCODE_NODE_ENV: true
                  AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}

            - name: Build Electron app (macOS)
              run: yarn compile:${STAGE}:mac
              env:
                  CSC_LINK: ${{ secrets.MAC_CERT_BASE64 }}
                  CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
                  BLOOM_APPLE_ID: ${{ secrets.APPLE_ID }}
                  BLOOM_APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  MACOS_SKIP_NOTARIZATION: ${{ inputs.sign != true }}
              working-directory: packages/desktop
              if: inputs.os == 'macos-11'

            - name: Build Electron app (Windows)
              run: yarn compile:${env:STAGE}:win
              env:
                  CSC_LINK: ${{ secrets.WIN_CERT_BASE64 }}
                  CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASSWORD }}
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              working-directory: packages/desktop
              if: inputs.os == 'windows-2019'

            - name: Build Electron app (Linux)
              run: yarn compile:${STAGE}:linux
              working-directory: packages/desktop
              if: inputs.os == 'ubuntu-20.04'
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Import GPG key (Linux)
              run: |
                  echo "$GPG_PRIVATE_KEY" | base64 -d > /tmp/private.key && \
                  echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --import /tmp/private.key
              env:
                  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
                  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
              if: ${{ inputs.sign == 'true' && inputs.os == 'ubuntu-20.04' }}

            - name: Sign AppImage (Linux)
              run: echo $GPG_PASSPHRASE | gpg --pinentry-mode loopback --batch --passphrase-fd 0 --armor --detach-sign --default-key contact@iota.org bloom-desktop*.AppImage
              working-directory: packages/desktop/out
              env:
                  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
              if: ${{ inputs.sign == 'true' && inputs.os == 'ubuntu-20.04' }}

            - name: Compute checksums (Linux)
              run: for i in `ls | grep 'bloom-desktop*'` ; do sha256sum $i | awk {'print $1'} > $i.sha256 ; done
              working-directory: packages/desktop/out
              if: ${{ inputs.sign == 'true' && inputs.os == 'ubuntu-20.04' }}

            - name: Compute checksums (macOS)
              run: for i in `ls | grep 'bloom-desktop*'` ; do shasum -a 256 $i | awk {'print $1'} > $i.sha256 ; done
              working-directory: packages/desktop/out
              if: ${{ inputs.sign == 'true' && inputs.os == 'macos-11' }}

            - name: Compute checksums (Windows)
              run: Get-ChildItem "." -Filter bloom-desktop* | Foreach-Object { $(Get-FileHash -Path $_.FullName -Algorithm SHA256).Hash | Set-Content ($_.FullName + '.sha256') }
              working-directory: packages/desktop/out
              if: ${{ inputs.sign == 'true' && inputs.os == 'windows-2019' }}

            - name: Upload artifacts
              if: ${{ inputs.release == 'true' }}
              uses: actions/upload-artifact@v2
              with:
                  name: bloom-desktop-${{ inputs.os }}
                  path: |
                      packages/desktop/out/bloom-desktop*
                      packages/desktop/out/latest*
