name: Release (Reusable)

on:
    workflow_call:
        inputs:
            version:
                required: true
                type: string
            stage:
                required: true
                type: string
            release_name:
                required: true
                type: string

jobs:
    release:
        name: Release - ${{ inputs.version }} (${{ inputs.stage }})
        if: ${{ always() }}
        runs-on: ubuntu-latest
        env:
            STAGE: ${{ inputs.stage }}
            VERSION: ${{ inputs.version }}
            RELEASE_NAME: ${{ inputs.release_name }}
        steps:
            - run: echo ${{ github.ref }}

            - name: Checkout code
              uses: actions/checkout@v4

            # - name: Downloading artifacts (Windows)
            #   uses: actions/download-artifact@v4
            #   with:
            #       name: bloom-desktop-windows-2022
            #       path: assets

            # - name: Downloading artifacts (macOS)
            #   uses: actions/download-artifact@v4
            #   with:
            #       name: bloom-desktop-macos-12
            #       path: assets

            - name: Downloading artifacts (Linux)
              uses: actions/download-artifact@v4
              with:
                  name: bloom-desktop-ubuntu-20.04
                  path: assets

            - name: Preparing release body
              run: |
                  sed -i 's/\r$//' ../../assets/*.sha256 && sed -i '/^$/d' ../../assets/*.sha256 && sed -i -e 's/\(.*\)/\L\1/' ../../assets/*.sha256
                  LIN_SHA256=$(cat ../../assets/bloom-desktop-${{ env.VERSION }}.AppImage.sha256)
                  echo $WIN_SHA256 $LIN_SHA256 $MAC_SHA256
                  touch CHANGELOG.md
                  echo '### Changelog' >> CHANGELOG.md
                  echo '------' >> CHANGELOG.md
                  echo '### File Hashes' >> CHANGELOG.md
                  echo '[How to verify the authenticity of your Bloom Desktop download](https://wiki.iota.org/shimmer/introduction/how_tos/verify_download/#verify-your-firefly-desktop-download)' >> CHANGELOG.md
                  echo '| File | Platform | SHA256 Hash |' >> CHANGELOG.md
                  echo '| --- | --- | --- |' >> CHANGELOG.md
                  echo '| bloom-desktop-${{ env.VERSION }}.AppImage | Linux |' $LIN_SHA256 '|' >> CHANGELOG.md
                  cat CHANGELOG.md
              working-directory: packages/desktop

            # - name: Create Release
            #   id: create_release
            #   uses: actions/create-release@v1.1.2
            #   env:
            #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            #   with:
            #       tag_name: ${{ github.ref }}
            #       release_name: Bloom Desktop ${{ env.RELEASE_NAME }}
            #       body_path: packages/desktop/CHANGELOG.md
            #       draft: true
            #       prerelease: true
                
            # - name: Upload Linux assets
            #   run: |
            #     gh release upload $RELEASE_NAME $BINARY $UPDATER $SIGNATURE --clobber
            #   env:
            #     RELEASE_NAME: Bloom Desktop ${{ env.RELEASE_NAME }}
            #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            #     BINARY: assets/bloom-desktop-${{ env.VERSION }}.AppImage
            #     SIGNATURE: assets/bloom-desktop-${{ env.VERSION }}.AppImage.asc
            #     UPDATER: assets/latest-linux.yml
            #   shell: bash
                
            # - name: Upload Mac assets
            #   run: |
            #     gh release upload $RELEASE_NAME $BLOCKMAP $BINARY $ZIP $UPDATER --clobber
            #   env:
            #     RELEASE_NAME: Bloom Desktop ${{ env.RELEASE_NAME }}
            #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            #     BLOCKMAP: assets/bloom-desktop-${{ env.VERSION }}.dmg.blockmap
            #     BINARY: assets/bloom-desktop-${{ env.VERSION }}.dmg
            #     ZIP: assets/bloom-desktop-${{ env.VERSION }}.zip
            #     UPDATER: assets/latest-mac.yml
            #   shell: bash
              
            # - name: Upload Windows assets
            #   run: |
            #     gh release upload $RELEASE_NAME $BINARY $BLOCKMAP $UPDATER --clobber
            #   env:
            #     RELEASE_NAME: Bloom Desktop ${{ env.RELEASE_NAME }}
            #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            #     BINARY: assets/bloom-desktop-${{ env.VERSION }}.exe
            #     BLOCKMAP: assets/bloom-desktop-${{ env.VERSION }}.exe.blockmap
            #     UPDATER: assets/latest.yml
            #   shell: bash

            - name: Create Release
              uses: "actions/github-script@v7"
              id: create_release
              env:
                TAG: ${{ github.ref }}
                RELEASE_NAME: Bloom Desktop ${{ env.RELEASE_NAME }}
                BODY_PATH: packages/desktop/CHANGELOG.md
              with:
                github-token: "${{ secrets.GITHUB_TOKEN }}"
                result-encoding: string
                script: |
                  const fs = require('fs');

                  const { TAG, RELEASE_NAME, BODY_PATH } = process.env;
                  const tag = TAG.replace('refs/tags/', '');
                  const releaseName = RELEASE_NAME.replace('refs/tags/', '');
              
                  const bodyPath = BODY_PATH;
                  let bodyFileContent = null;
                  if (bodyPath !== '' && !!bodyPath) {
                    try {
                      bodyFileContent = fs.readFileSync(bodyPath, { encoding: 'utf8' });
                    } catch (error) {
                      core.setFailed(error.message);
                    }
                  }
              
                  const createReleaseResponse = await github.rest.repos.createRelease({
                    tag_name: tag,
                    name: releaseName,
                    body: bodyFileContent,
                    draft: true,
                    prerelease: true,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    target_commitish: context.sha
                  });
              
                  return JSON.stringify(createReleaseResponse);

            
            - name: OUTPUT
              run: echo "${{ steps.create_release.outputs }}"

            - name: Upload Linux assets
              uses: "actions/github-script@v7"
              env:
                VERSION: ${{ env.VERSION }}
                UPLOAD_URL: ${{ steps.create_release.outputs.result }}
              with:
                github-token: "${{ secrets.GITHUB_TOKEN }}"
                script: |
                  const fs = require('fs').promises;

                  const { VERSION, UPLOAD_URL } = process.env;
                  const files = [
                    `bloom-desktop-${VERSION}.AppImage`,
                    `bloom-desktop-${VERSION}.AppImage.asc`,
                    'latest-linux.yml'
                  ]
                  for (const file of files) {
                    await github.rest.repos.uploadReleaseAsset({
                      url: UPLOAD_URL,
                      name: file,
                      data: await fs.readFile('assets/' + file)
                    });
                  }
            
    
            - name: Listing artifacts
              run: ls -al
